import math

class Pixel:   
    def __init__(self, red, green, blue):
        r = red
        g = green
        b = blue
        s = (red+green+blue)//3
        
        Pixel.__mods = [[r, g, b],
                        [s, s, s],
                        [r, 0, 0],
                        [2*r, g, b],
                        [0, g, 0],
                        [r, 2*g, b],
                        [0, 0, b],
                        [r, g, 2*b],
                        [r, s, s],
                        [s, g, s],
                        [s, s, b],
                        [r, g, s],
                        [s, g, b],
                        [r, s, b],
                        [b, r, g],
                        [g, b, r],
                        [r, b, g],
                        [b, g, r],
                        [g, r, b],
                        [s**2, s, 1],
                        [s, s**2, 1],
                        [1, s**2, s],
                        [s**2, 1, s],
                        [s, 1, s**2],
                        [1, s, s**2],
                        [s**2, s, b],
                        [s, s**2, b],
                        [r, s**2, s],
                        [s**2, g, s],
                        [s, g, s**2],
                        [r, s, s**2],
                        [s ** 2, s, r],
                        [s, s ** 2, r],
                        [g, s ** 2, s],
                        [s ** 2, b, s],
                        [s, b, s ** 2],
                        [g, s, s ** 2],
                        [s ** 2, s, g],
                        [s, s ** 2, g],
                        [b, s ** 2, s],
                        [s ** 2, r, s],
                        [s, r, s ** 2],
                        [b, s, s ** 2],
                        [math.ceil(r ** (g / 130)), math.ceil(g ** (b / 130)), math.ceil(b ** (r / 130))],
                        [math.ceil(r ** (b / 130)), math.ceil(g ** (r / 130)), math.ceil(b ** (g / 130))],
                        [math.ceil(g ** (b / 130)), math.ceil(b ** (r / 130)), math.ceil(r ** (g / 130))],
                        [math.ceil(g ** (r / 130)), math.ceil(b ** (g / 130)), math.ceil(r ** (b / 130))],
                        [math.ceil(b ** (r / 130)), math.ceil(r ** (g / 130)), math.ceil(g ** (b / 130))],
                        [math.ceil(b ** (g / 130)), math.ceil(r ** (b / 130)), math.ceil(g ** (r / 130))],
                        [math.ceil(r ** (g / 110)), math.ceil(g ** (b / 110)), math.ceil(b ** (r / 110))],
                        [math.ceil(r ** (b / 110)), math.ceil(g ** (r / 110)), math.ceil(b ** (g / 110))],
                        [math.ceil(g ** (b / 110)), math.ceil(b ** (r / 110)), math.ceil(r ** (g / 110))],
                        [math.ceil(g ** (r / 110)), math.ceil(b ** (g / 110)), math.ceil(r ** (b / 110))],
                        [math.ceil(b ** (r / 110)), math.ceil(r ** (g / 110)), math.ceil(g ** (b / 110))],
                        [math.ceil(b ** (g / 110)), math.ceil(r ** (b / 110)), math.ceil(g ** (r / 110))],
                        [math.ceil(r ** (g / 90)), math.ceil(g ** (b / 90)), math.ceil(b ** (r / 90))],
                        [math.ceil(r ** (b / 90)), math.ceil(g ** (r / 90)), math.ceil(b ** (g / 90))],
                        [math.ceil(g ** (b / 90)), math.ceil(b ** (r / 90)), math.ceil(r ** (g / 90))],
                        [math.ceil(g ** (r / 90)), math.ceil(b ** (g / 90)), math.ceil(r ** (b / 90))],
                        [math.ceil(b ** (r / 90)), math.ceil(r ** (g / 90)), math.ceil(g ** (b / 90))],
                        [math.ceil(b ** (g / 90)), math.ceil(r ** (b / 90)), math.ceil(g ** (r / 90))],
                        [math.ceil(r ** (g / 110)), math.ceil(g ** (b / 130)), math.ceil(b ** (r / 130))],
                        [math.ceil(r ** (b / 130)), math.ceil(g ** (r / 110)), math.ceil(b ** (g / 130))],
                        [math.ceil(g ** (b / 130)), math.ceil(b ** (r / 130)), math.ceil(r ** (g / 110))],
                        [math.ceil(g ** (r / 130)), math.ceil(b ** (g / 110)), math.ceil(r ** (b / 110))],
                        [math.ceil(b ** (r / 110)), math.ceil(r ** (g / 130)), math.ceil(g ** (b / 110))],
                        [math.ceil(b ** (g / 110)), math.ceil(r ** (b / 110)), math.ceil(g ** (r / 130))],
                        [math.ceil(r ** (g / 90)), math.ceil(g ** (b / 110)), math.ceil(b ** (r / 110))],
                        [math.ceil(r ** (b / 110)), math.ceil(g ** (r / 90)), math.ceil(b ** (g / 110))],
                        [math.ceil(g ** (b / 110)), math.ceil(b ** (r / 110)), math.ceil(r ** (g / 90))],
                        [math.ceil(g ** (r / 110)), math.ceil(b ** (g / 90)), math.ceil(r ** (b / 90))],
                        [math.ceil(b ** (r / 90)), math.ceil(r ** (g / 110)), math.ceil(g ** (b / 90))],
                        [math.ceil(b ** (g / 90)), math.ceil(r ** (b / 90)), math.ceil(g ** (r / 110))],
                        [math.ceil(r ** (g / 130)), math.ceil(g ** (b / 90)), math.ceil(b ** (r / 90))],
                        [math.ceil(r ** (b / 90)), math.ceil(g ** (r / 130)), math.ceil(b ** (g / 90))],
                        [math.ceil(g ** (b / 90)), math.ceil(b ** (r / 90)), math.ceil(r ** (g / 130))],
                        [math.ceil(g ** (r / 90)), math.ceil(b ** (g / 130)), math.ceil(r ** (b / 130))],
                        [math.ceil(b ** (r / 130)), math.ceil(r ** (g / 90)), math.ceil(g ** (b / 130))],
                        [math.ceil(b ** (g / 130)), math.ceil(r ** (b / 130)), math.ceil(g ** (r / 90))],
                        [math.ceil(r ** 1.3), math.ceil(g ** 1.3), math.ceil(b ** 1.3)],
                        [math.ceil(s ** 1.3), math.ceil(s ** 1.3), math.ceil(s ** 1.3)],
                        [math.ceil(r ** 1.3), 0, 0],
                        [math.ceil((2*r) ** 1.3), math.ceil(g ** 1.3), math.ceil(b ** 1.3)],
                        [0, math.ceil(g ** 1.3), 0],
                        [math.ceil(r ** 1.3), math.ceil((2*g) ** 1.3), math.ceil(b ** 1.3)],
                        [0, 0, math.ceil(b ** 1.3)],
                        [math.ceil(r ** 1.3), math.ceil(g ** 1.3), math.ceil((2*b) ** 1.3)],
                        [math.ceil(r ** 1.3), math.ceil(s ** 1.3), math.ceil(s ** 1.3)],
                        [math.ceil(s ** 1.3), math.ceil(g ** 1.3), math.ceil(s ** 1.3)],
                        [math.ceil(s ** 1.3), math.ceil(s ** 1.3), math.ceil(b ** 1.3)],
                        [math.ceil(r ** 1.3), math.ceil(g ** 1.3), math.ceil(s ** 1.3)],
                        [math.ceil(s ** 1.3), math.ceil(g ** 1.3), math.ceil(b ** 1.3)],
                        [math.ceil(r ** 1.3), math.ceil(s ** 1.3), math.ceil(b ** 1.3)],
                        [math.ceil(b ** 1.3), math.ceil(r ** 1.3), math.ceil(g ** 1.3)],
                        [math.ceil(g ** 1.3), math.ceil(b ** 1.3), math.ceil(r ** 1.3)],
                        [math.ceil(r ** 1.3), math.ceil(b ** 1.3), math.ceil(g ** 1.3)],
                        [math.ceil(b ** 1.3), math.ceil(g ** 1.3), math.ceil(r ** 1.3)],
                        [math.ceil(g ** 1.3), math.ceil(r ** 1.3), math.ceil(b ** 1.3)],
                        [math.ceil(math.sin(r)*255), g, b],
                        [math.ceil(math.sin(r*180/math.pi)*255), g, b],
                        [r, math.ceil(math.sin(g) * 255), b],
                        [r, math.ceil(math.sin(g * 180 / math.pi) * 255), b],
                        [r, g, math.ceil(math.sin(b) * 255)],
                        [r, g, math.ceil(math.sin(r * 180 / math.pi) * 255)],
                        [math.ceil(math.cos(r) * 255), g, b],
                        [math.ceil(math.cos(r * 180 / math.pi) * 255), g, b],
                        [r, math.ceil(math.cos(g) * 255), b],
                        [r, math.ceil(math.cos(g * 180 / math.pi) * 255), b],
                        [r, g, math.ceil(math.cos(b) * 255)],
                        [r, g, math.ceil(math.cos(r * 180 / math.pi) * 255)],
                        [r, g, (b * r) % 255],
                        [(r * g) % 255, g, b],
                        [r, (g * b) % 255, b],
                        [r, g, (r * g) % 255],
                        [(g * b) % 255, g, b],
                        [r, (b * r) % 255, b],
                        [r, g, (g * b) % 255],
                        [r, (r * g) % 255, b],
                        [(b * r) % 255, g, b],
                        [math.ceil(math.sin(r) * r), math.ceil(math.sin(g) * g), math.ceil(math.sin(b) * b)], #gray change
                        [math.ceil(math.cos(r) * r), math.ceil(math.cos(g) * g), math.ceil(math.cos(b) * b)], #gray change
                        [math.ceil(math.sin(r) * g), math.ceil(math.sin(g) * b), math.ceil(math.sin(b) * r)], #gray change
                        [math.ceil(math.cos(r) * g), math.ceil(math.cos(g) * b), math.ceil(math.cos(b) * r)], #gray change
                        [math.ceil(math.sin(r) * b), math.ceil(math.sin(g) * r), math.ceil(math.sin(b) * g)], #gray change
                        [math.ceil(math.cos(r) * b), math.ceil(math.cos(g) * r), math.ceil(math.cos(b) * g)], #gray change
                        [math.ceil(math.sin(g) * r), math.ceil(math.sin(b) * g), math.ceil(math.sin(r) * b)], #gray change
                        [math.ceil(math.cos(g) * r), math.ceil(math.cos(b) * g), math.ceil(math.cos(r) * b)], #gray change
                        [math.ceil(math.sin(b) * r), math.ceil(math.sin(r) * g), math.ceil(math.sin(g) * b)], #gray change
                        [math.ceil(math.cos(b) * r), math.ceil(math.cos(r) * g), math.ceil(math.cos(g) * b)]  #gray change
                        ]
    
    def modeget(self, mode):
        return Pixel.__mods[mode][0], Pixel.__mods[mode][1], Pixel.__mods[mode][2]

    def getmodsquantity(self):
        return len(Pixel.__mods)
